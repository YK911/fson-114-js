/**
 * –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –º–∞—Å–∏–≤—É
 *
 * - –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –º–∞—Å–∏–≤—É —Ü–∏–∫–ª–æ–º for
 * - –ú–µ—Ç–æ–¥ includes()
 * - –¶–∏–∫–ª for...of
 * - –†—ñ–∑–Ω–∏—Ü—è —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ for —ñ for...of
 */

const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
const isFriendsOnline = [true, true, false, true];
// console.table(friends);

for (let i = 0; i < friends.length; i += 1) {
  // console.log(i);
  // console.log(
  //   (friends[i] += ` - ${isFriendsOnline[i] ? "Online" : "Offline"}`)
  // );
}

// console.table(friends);

for (let friend of friends) {
  // console.log(friend);
  // console.log(friends);
}

/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
 * –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.
 * –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
 */

const values = "8 11";

function calculateSquare(data) {
  if (typeof data !== "string") {
    console.warn("Wrong data type");
    return;
  }

  const squareParams = data.split(" ");
  const square = squareParams[0] * squareParams[1];
  console.log("square:", square);
}

// calculateSquare(values);

/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits.
 * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫
 * —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞.
 * –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 */

const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã"];

for (let i = 0; i < fruits.length; i++) {
  const element = fruits[i];
  console.log(`${i + 1}: ${element}`);
}
